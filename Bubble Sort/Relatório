==============================
RELAT√ìRIO DO PROGRAMA EM PYTHON
==============================

‚úÖ RESUMO:
Programa que compara o tempo de execu√ß√£o entre o algoritmo de ordena√ß√£o Bubble Sort e o m√©todo nativo `.sort()` do Python. Ambos s√£o aplicados a listas com 4000 n√∫meros aleat√≥rios.

üß† VARI√ÅVEIS USADAS:
- array ‚Üí lista de n√∫meros inteiros gerados aleatoriamente
- numero ‚Üí tamanho da lista
- contador_1, contador_2 ‚Üí √≠ndices de controle dos loops
- inicio, fim ‚Üí marca√ß√£o de tempo para medir desempenho
- total, total2 ‚Üí tempo de execu√ß√£o dos algoritmos

üîß FUN√á√ïES PRINCIPAIS:
- random.sample() ‚Üí gera lista de n√∫meros aleat√≥rios sem repeti√ß√£o
- time.time() ‚Üí captura o tempo atual para medir dura√ß√£o
- bubble_sort() ‚Üí fun√ß√£o personalizada que implementa o algoritmo Bubble Sort
- array.sort() ‚Üí m√©todo interno do Python para ordena√ß√£o eficiente
- print() ‚Üí exibe os elementos da lista e os tempos de execu√ß√£o

‚ö†Ô∏è OBSERVA√á√ïES:
- O Bubble Sort √© significativamente mais lento que `.sort()` para listas grandes.
- O programa imprime todos os elementos das listas, o que pode afetar o tempo total medido.
- Para testes mais precisos, recomenda-se desativar a impress√£o dos elementos.

==============================
