==============================
RELAT√ìRIO DO PROGRAMA EM PYTHON
==============================

‚úÖ RESUMO:
Programa com interface gr√°fica que monitora o uso da CPU e RAM enquanto executa algoritmos de ordena√ß√£o (Bubble Sort, Selection Sort, Insertion Sort e Quick Sort). O usu√°rio escolhe o algoritmo e define o tamanho do vetor. O tempo de execu√ß√£o e o uso m√°ximo de recursos s√£o exibidos na tela.

üß† VARI√ÅVEIS USADAS:
- algoritmo_atual ‚Üí controla qual algoritmo ser√° executado
- vetor, vetor2, vetor3, vetor4 ‚Üí listas com os dados a serem ordenados
- inicio, fim ‚Üí marcam o tempo de in√≠cio e fim da execu√ß√£o
- tempo1, tempo2, tempo3 ‚Üí armazenam o tempo de execu√ß√£o de cada algoritmo
- max_cpu, max_ram ‚Üí registram o uso m√°ximo de CPU e RAM durante a execu√ß√£o

üîß FUN√á√ïES PRINCIPAIS:
- bubble_sort(), selection_sort(), insertion_sort(), quick_sort() ‚Üí algoritmos de ordena√ß√£o
- time.time() ‚Üí mede o tempo de execu√ß√£o
- psutil.cpu_percent(), psutil.virtual_memory().percent ‚Üí monitoram uso de CPU e RAM
- configure() ‚Üí atualiza os valores exibidos na interface
- app.mainloop() ‚Üí mant√©m a interface gr√°fica ativa

‚ö†Ô∏è OBSERVA√á√ïES:
- Cada algoritmo √© executado com uma c√≥pia independente do vetor original.
- O uso de `vetor = 0` ap√≥s a execu√ß√£o n√£o √© necess√°rio e pode ser substitu√≠do por `del vetor` ou ignorado.
- O monitoramento de recursos √© feito em paralelo usando `threading`.
- A interface exibe os tempos e os recursos usados por cada algoritmo de forma separada.

==============================
